log "/var/log/bird.log" all;
debug protocols all;
#debug commands 2;

router id  10.0.0.1;
define myas = 100;

function avoid_martians()
prefix set martians;
{
    #martians = [ 169.254.0.0/16+, 172.16.0.0/12+, 192.168.0.0/16+, 10.0.0.0/8+,
    #    224.0.0.0/4+, 240.0.0.0/4+, 0.0.0.0/32-, 0.0.0.0/0{25,32}, 0.0.0.0/0{0,7} ];
    martians = [ 169.254.0.0/16+, 172.16.0.0/12+, 192.168.0.0/16+,
        224.0.0.0/4+, 240.0.0.0/4+, 0.0.0.0/32-, 0.0.0.0/0{25,32}, 0.0.0.0/0{0,7} ];

    if net ~ martians then return false;

    return true;
}

function bgp_out(int peeras)
{
    if ! (source = RTS_BGP ) then return false;
    if peeras > 65535 then return true; # communities does not support AS32
    if (0,peeras) ~ bgp_community then return true;
    if (myas,peeras) ~ bgp_community then return true;
    if (0, myas) ~ bgp_community then return false;

    return true;
}

protocol kernel {
    persist;                # Don't remove routes on BIRD shutdown
    scan time 200;          # Scan kernel routing table every 200 seconds
    export all;
    import all;
}

protocol device {
    scan time 10;           # Scan interfaces every 10 seconds
}

table T200;
filter bgp_in_AS200
prefix set allnet;
int set allas;
{
    if ! (avoid_martians()) then reject;
    if (bgp_path.first != 200 ) then reject;
    allas = [ 100, 200, 300, 400, 500 ];
    if !(bgp_path.last ~ allas) then reject;
    allnet = [ 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24 ];
    if ! (net ~ allnet) then reject;
    accept;
}

protocol pipe P200 {
  description "AS-200";
  table master;
  mode transparent;
  peer table T200;
  import filter bgp_in_AS200;
  export where bgp_out(200);
}

protocol bgp toAS200 {
    local as myas;
    neighbor 10.0.0.2 as 200;
    export all;
    import all;
    route limit 1000;
    table T200;
    rs client;
}

table T300;
filter bgp_in_AS300
prefix set allnet;
int set allas;
{
    if ! (avoid_martians()) then reject;
    if (bgp_path.first != 300 ) then reject;
    allas = [ 100, 200, 300, 400, 500 ];
    if !(bgp_path.last ~ allas) then reject;
    allnet = [ 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24 ];
    if ! (net ~ allnet) then reject;
    accept;
}

protocol pipe P300 {
  description "AS-300";
  table master;
  mode transparent;
  peer table T300;
  import filter bgp_in_AS300;
  export where bgp_out(300);
}

protocol bgp toAS300 {
    local as myas;
    neighbor 10.0.0.3 as 300;
    export all;
    import all;
    route limit 1000;
    table T300;
    rs client;
}


table T400;
filter bgp_in_AS400
prefix set allnet;
int set allas;
{
    if ! (avoid_martians()) then reject;
    if (bgp_path.first != 400 ) then reject;
    allas = [ 100, 200, 300, 400, 500 ];
    if !(bgp_path.last ~ allas) then reject;
    allnet = [ 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24 ];
    if ! (net ~ allnet) then reject;
    accept;
}

protocol pipe P400 {
  description "AS-400";
  table master;
  mode transparent;
  peer table T400;
  import filter bgp_in_AS400;
  export where bgp_out(400);
}


protocol bgp toAS400 {
    local as myas;                      
    neighbor 10.0.0.4 as 400;
    export all;
    import all;
    route limit 1000;
    table T400;
    rs client;
}

table T500;
filter bgp_in_AS500
prefix set allnet;
int set allas;
{
    if ! (avoid_martians()) then reject;
    if (bgp_path.first != 500 ) then reject;
    allas = [ 100, 200, 300, 400, 500 ];
    if !(bgp_path.last ~ allas) then reject;
    allnet = [ 10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24 ];
    if ! (net ~ allnet) then reject;
    accept;
}

protocol pipe P500 {
  description "AS-500";
  table master;
  mode transparent;
  peer table T500;
  import filter bgp_in_AS500;
  export where bgp_out(500);
}

protocol bgp toAS500 {
    local as myas;                      
    neighbor 10.0.0.5 as 500;
    export all;
    import all;
    route limit 1000;
    table T500;
    rs client;
}
